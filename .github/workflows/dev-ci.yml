name: DEV CI

on:
  workflow_dispatch:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

concurrency:
  group: dev
  cancel-in-progress: true

env:
  PROJECT_NAME: mapsmi-dev
  DOCKER_IMAGE_NAME: mapsmi-dev
  DOCKER_IMAGE_TAG: latest
  ENVIRONMENT: dev
  NODE_ENV: dev

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.dev
          push: true
          tags: ${{ vars.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
          labels: |
            project=${{ env.PROJECT_NAME }}
            env=${{ env.ENVIRONMENT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [build]
    runs-on: [self-hosted]
    environment: dev
    
    steps:
    - name: deploy
      run: 'echo "Started"'
    
    - uses: actions/checkout@v4
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_REGISTRY_USER }}
        password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

    - name: Docker Pull
      run: docker pull ${{ vars.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
    
    - name: Run services
      run: |
          docker stop ${{ env.PROJECT_NAME }} || true && docker rm ${{ env.PROJECT_NAME }} || true && docker run -p 3000:3000 \
          -e NODE_ENV="${{ env.NODE_ENV }}" \
          -e ENVIRONMENT="${{ env.ENVIRONMENT }}" \
          # -e MAPBOX_TOKEN="${{ secrets.MAPBOX_TOKEN }}" \
          # -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
          # -e MAPBOX_GEO_TOKEN="${{ secrets.MAPBOX_GEO_TOKEN }}" \
          # -e NEXT_PUBLIC_BASE_URL_FRONTEND="${{ vars.NEXT_PUBLIC_BASE_URL_FRONTEND }}" \
          # -e NEXT_PUBLIC_BASE_URL_API="${{ vars.NEXT_PUBLIC_BASE_URL_API }}" \
          -td --add-host host.docker.internal:host-gateway --restart unless-stopped --name ${{ env.PROJECT_NAME }} ${{ vars.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

  clean_docker:
    needs: [deploy]
    runs-on: [self-hosted]
    steps:
      - name: Prune Docker Images
        run: docker image prune --filter label=project=${{ env.PROJECT_NAME }} --filter label=env=${{ env.ENVIRONMENT }} -af
      - name: Prune Docker Buildx
        run: docker buildx prune -f
